!!!
%html{ lang: I18n.locale }
  %head
    %meta{ content: 'text/html; charset=UTF-8', 'http-equiv' => 'Content-Type' }/
    %meta{ charset: 'utf-8' }/
    %meta{ name: 'robots', content: 'noindex' }
    %title= yield :page_title
    %meta{ content: 'width=device-width,initial-scale=1', name: 'viewport' }/
    %link{ href: 'https://fonts.googleapis.com/css?family=Roboto:400', rel: 'stylesheet' }/

    :css
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: #282c37;
        color: #9baec8;
        text-align: center;
        margin: 0;
        padding: 20px;
      }

      .container {
        width: 700px;
        margin: 0 auto;
        margin-top: 40px;
      }

      .service-logo img {
        display: block;
        margin: 0 auto 20px;
        width: 100px;
      }

      .dialog img {
        display: block;
        max-width: 600px;
        width: 100%;
        height: auto;
        margin: 50px auto;
      }

      .dialog h1 {
        font: 20px/28px -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-weight: 400;
      }

      a {
        color: white;
        font-size: 14px;
      }

      @media screen and (max-width: 700px) {
        .container {
            width: 100%;
            margin: 0;
        }
      }


    :javascript
      document.addEventListener('DOMContentLoaded', function() {
        var json = JSON.parse(document.getElementById('maintenance_images').textContent);
        var img = document.getElementById('error_image');
        var statusCode = Number(img.getAttribute('data-status-code'));
        var imageUrls = [];
        var defaultUrl = '/oops.png';

        for(var index in json) {
          var attributes = json[index];

          if (attributes['statuses'].indexOf(statusCode) > -1) {
            Array.prototype.push.apply(imageUrls, attributes['images']);
          }
        }

        var imageUrl = imageUrls[Math.floor(Math.random() * imageUrls.length)];
        img.setAttribute('src', imageUrl || defaultUrl);
      });

  %body
    %script#maintenance_images{ type: 'application/json' }!= json_escape(MaintenanceImage.mappings.to_json)

    .container
      = render 'accounts/service_logo'

      .dialog
        = link_to root_path do
          %img#error_image{ alt: 'Mastodon', src: '', data: { status_code: response.code } }/
        %div
          %h1= yield :content

      = link_to t('errors.top'), root_path
